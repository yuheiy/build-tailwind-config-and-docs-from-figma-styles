import fs from 'node:fs/promises';
import path from 'node:path';
import * as prettier from 'prettier';
import type { ConfigExtension, DefaultClassGroupIds, DefaultThemeGroupIds } from 'tailwind-merge';
import { componentsCss, themeCss, twMergeKeys } from '../lib/index.ts';

const files = new Map<string, string>();

const pkgDirs = {
  ui: path.join(import.meta.dirname, '../../ui'),
};

const css = String.raw;

const banner = `/**
 * This file is automatically generated by packages/tailwind-config/scripts/generate.ts!
 */
`;

files.set(
  path.join(pkgDirs.ui, 'theme.css'),
  css`
    ${banner}
    @theme {
      --font-sans: Inter, Noto Sans JP, sans-serif;
      --font-serif: serif;
      --font-mono: Roboto Mono, monospace;

      --color-*: initial;
      ${themeCss.color}

      ${themeCss.divideColor}

      ${themeCss.borderColor}

      ${themeCss.backgroundColor}

      ${themeCss.textColor}

      --text-*: initial;
      ${themeCss.text}

      --shadow-*: initial;
      ${themeCss.shadow}

      --radius-xl: 0.625rem;
      --radius-2xl: 0.75rem;
      --radius-3xl: 1rem;
      --radius-4xl: 1.5rem;

      ${themeCss.animate}

      @keyframes swing {
        15% {
          transform: translateY(3px);
        }

        30% {
          transform: translateY(-3px);
        }

        50% {
          transform: translateY(2px);
        }

        65% {
          transform: translateY(-2px);
        }

        80% {
          transform: translateY(1px);
        }

        100% {
          transform: translateY(0);
        }
      }

      @keyframes fade-in {
        0% {
          opacity: 0;
        }

        100% {
          opacity: 1;
        }
      }

      @keyframes fade-out {
        0% {
          opacity: 1;
        }

        100% {
          opacity: 0;
        }
      }

      @keyframes zoom-in {
        0% {
          transform: scale(0.96);
        }

        100% {
          transform: scale(1);
        }
      }

      @keyframes slide-in-right {
        0% {
          transform: translateX(1000px);
          opacity: 0;
        }

        100% {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slide-in-bottom {
        0% {
          transform: translateY(1000px);
          opacity: 0;
        }

        100% {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes inflate {
        0% {
          transform: translate(-50%, -48%) scale(0.96);
        }

        100% {
          transform: translate(-50%, -50%) scale(1);
        }
      }

      @keyframes accordion-slide-down {
        0% {
          height: 0;
        }

        100% {
          height: var(--radix-accordion-content-height);
        }
      }

      @keyframes accordion-slide-up {
        0% {
          height: var(--radix-accordion-content-height);
        }

        100% {
          height: 0;
        }
      }
    }
  `,
);

files.set(
  path.join(pkgDirs.ui, 'components.css'),
  css`
    ${banner}
    /* Typography */
    ${componentsCss.typography}
  `,
);

const tailwindMergeConfig: ConfigExtension<DefaultClassGroupIds, DefaultThemeGroupIds> = {
  override: {
    theme: {
      // https://github.com/dcastil/tailwind-merge/blob/v3.3.0/src/lib/default-config.ts#L232
      shadow: twMergeKeys.shadow,
    },
  },
  extend: {
    theme: {
      // https://github.com/dcastil/tailwind-merge/blob/v3.3.0/src/lib/default-config.ts#L208
      animate: twMergeKeys.animate,
    },
  },
};

files.set(
  path.join(pkgDirs.ui, 'src/tailwind-merge-config.json'),
  JSON.stringify(tailwindMergeConfig, null, 2),
);

async function format(
  source: string | Buffer,
  options: prettier.ResolveConfigOptions & prettier.Options = {},
) {
  const file = options.filepath;
  const config = file ? await prettier.resolveConfig(file, options) : undefined;
  return await prettier.format(String(source), {
    ...config,
    ...options,
    filepath: file,
  });
}

for (const [filePath, content] of files) {
  const formattedContent = await format(content, { filepath: filePath });
  await fs.writeFile(filePath, formattedContent);
}
